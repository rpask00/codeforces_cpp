#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;
bool t[10000]{};
int s[10000]{};
string a, b;
int wrong = 10;
bool v = false;

string solve(int l, bool o)
{
    int cb = b[l] - '0';
    for (int i = 0; i < a.size(); i++)
    {
        if (t[i] or (!o and s[i] > cb) or wrong == s[i])
            continue;

        if (l + 1 == a.size())
            return to_string(s[i]);

        t[i] = true;
        wrong = 10;
        string x = solve(l + 1, o or s[i] < cb);
        if (v)
        {
            v = false;
            t[i] = false;
            wrong = s[i];
            continue;
        }

        return to_string(s[i]) + x;
    }
    v = true;
    return "";
}

int main()
{
    string r = "";
    cin >> a >> b;
    for (int i = 0; i < a.size(); i++)
        s[i] = a[i] - '0';

    sort(s, s + a.size(), greater<int>());

    if (a.size() < b.size())
        for (int j = 0; j < a.size(); j++)
            r += to_string(s[j]);
    else
        r = solve(0, false);

    cout << r;
}


